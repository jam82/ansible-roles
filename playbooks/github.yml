---

- name: "Get ansible role repositories from GitHub within a user or organization context"
  hosts: localhost
  gather_facts: false
  tasks:
    - name: "Lookup 'ansible-role-*' repositories on GitHub for {{ github_user_or_org }}"
      ansible.builtin.uri:
        url: "https://api.github.com/search/repositories?q=ansible-role-*+in:name+user:{{ github_user_or_org }}"
        method: GET
        headers:
          Accept: "application/vnd.github.v3+json"
          Authorization: "{{ 'Bearer ' + github_token if github_token else omit }}"
        return_content: true
        validate_certs: true
      register: github_response

    - name: "Display repository names and descriptions"
      ansible.builtin.debug:
        msg: "Repository Name: {{ item.name }}, Description: {{ item.description }}"
      loop: "{{ github_response.json.items }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Clone or update repositories
      vars:
        repo_path: "{{ base_directory_roles }}/{{ item.name }}"
      block:
        - name: Check if the repository directory exists
          ansible.builtin.stat:
            path: "{{ repo_path }}"
          register: repo_dir

        - name: Clone repository if it does not exist
          ansible.builtin.git:
            repo: "{{ item.ssh_url }}"
            dest: "{{ repo_path }}"
            clone: yes
            update: no
            accept_newhostkey: true
          when: not repo_dir.stat.exists

        # - name: Update repository if it exists
        #   ansible.builtin.git:
        #     repo: "{{ item.clone_url }}"
        #     dest: "{{ repo_path }}"
        #     remote: origin
        #     version: dev
        #     force: yes
        #   when: repo_dir.stat.exists

        - name: Create local dev branch if it does not exist
          ansible.builtin.command:
            cmd: git checkout -b dev
            chdir: "{{ repo_path }}"
          register: branch_creation
          failed_when: branch_creation.rc != 0 and 'already exists' not in branch_creation.stderr
          when: repo_dir.stat.exists and not '"dev"' in branch_creation.stdout
      loop: "{{ github_response.json.items }}"
      loop_control:
        label: "{{ item.name }}"
